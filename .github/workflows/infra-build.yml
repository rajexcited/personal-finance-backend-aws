# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Test CDK Build

# list of trigger events https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows
on:
  push:
    branches:
      - test-pipeline

concurrency:
  group: build-test
  cancel-in-progress: true

#env:
# AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
#ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
#ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
# file, e.g. .aws/task-definition.json
#CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
# containerDefinitions section of your task definition

# permissions:
#   id-token: write
#   contents: read

jobs:
  # oidc_debug_test:
  #   permissions:
  #     contents: read
  #     id-token: write
  #   runs-on: ubuntu-latest
  #   name: A test of the oidc debugger
  #   steps:
  #     - name: Checkout actions-oidc-debugger
  #       uses: actions/checkout@v3
  #       with:
  #         repository: github/actions-oidc-debugger
  #         ref: main
  #         token: ${{ github.token }}
  #         path: ./.github/actions/actions-oidc-debugger
  #     - name: Debug OIDC Claims
  #       uses: ./.github/actions/actions-oidc-debugger
  #       with:
  #         audience: '${{ github.server_url }}/${{ github.repository_owner }}'

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build

  unittest:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - run: npm run test

  synth:
    name: Synthesize
    runs-on: ubuntu-latest
    needs:
      - build
    environment: test
    steps:
      # - name: print environment to troubleshoot
      #   env:
      #     VARS_JSON: ${{ toJSON(vars) }}
      #     SECRETS_JSON: ${{ toJSON(secrets) }}
      #     ENV_JSON: ${{ toJSON(env) }}
      #   run: |
      #     echo vars context = "${VARS_JSON}"
      #     echo secrets context = "${SECRETS_JSON}"
      #     echo env context = "${ENV_JSON}"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "synth"
          actions_comment: true
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}

  awsauth:
    name: Configure AWS credentials
    runs-on: ubuntu-latest
    needs:
      - build
      - unittest
      - synth
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession

  diff:
    name: Stack Differences
    runs-on: ubuntu-latest
    needs:
      - synth
      - awsauth
    environment: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "diff"
          actions_comment: true
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
