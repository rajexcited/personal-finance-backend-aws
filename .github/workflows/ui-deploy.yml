name: UI Deploy to AWS

on:
  repository_dispatch:
    types:
      - on-demand-deploy-ui

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.client_payload.env_suffix }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  SUPPORTED_ENVS: (test, prod)

jobs:
  print_client_payload:
    name: Print client payload of dispatch event
    runs-on: ubuntu-latest
    steps:
      - name: print artifact details
        run: |
          artifact_url=${{ github.event.client_payload.artifact_url }}
          echo "Artifact Url: $artifact_url"
          artifact_name=${{ github.event.client_payload.artifact_name }}
          echo "Artifact Name: $artifact_name"
          ui_repo_run_id=${{ github.event.client_payload.repo_run_id }}
          echo "UI Repository Run Id: $ui_repo_run_id where artifact can be found"
          ui_repository=${{ github.event.client_payload.ui_repository }}
          echo "UI Repository: $ui_repository"
          env_suffix=${{ github.event.client_payload.env_suffix }}
          echo "Env Suffix: $env_suffix"
      - name: print github context
        run: echo github context json values = $GITHUB_CONTEXT_JSON
        # env:
        # GITHUB_CONTEXT_JSON: ${{ toJSON(github) }}
  validate_env_suffix:
    name: Validate env in client payload
    runs-on: ubuntu-latest
    steps:
      - name: invalid env suffix
        run: |
          echo env_suffix in client request payload is not supported
          exit 1
        if: ${{ !contains(env.SUPPORTED_ENVS, github.event.client_payload.env_suffix) }}
      - run: echo env_suffix in client request payload is supported

  verify_artifact:
    name: Download and Verify UI Artifact
    runs-on: ubuntu-latest
    needs: validate_env_suffix
    steps:
      - run: mkdir -p dist/ui
      - name: download UI artifact
        uses: actions/download-artifact@v4
        with:
          path: dist/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.ui_repository }}
          run-id: ${{ github.event.client_payload.repo_run_id }}
      - run: ls -lrt dist/${{ github.event.client_payload.artifact_name }}
      - name: Copy artifact files to UI asset directory
        run: cp -r dist/$ARTIFACT_NAME/* dist/ui
        env:
          ARTIFACT_NAME: ${{ github.event.client_payload.artifact_name }}
      - name: validate UI asset directory structure
        run: |
          ls -lrt dist/ui
          ls dist/ui/index.html
          ls -lrt dist/ui/static
          ls dist/ui/logo.jpeg
          ls dist/ui/logo192.png
          ls -lrt dist/ui/static/css
          ls -lrt dist/ui/static/js
          ls -lrt dist/ui/static/media
          ls -lrt dist/ui/favicon.ico

  awsauth:
    name: Verify AWS Access
    runs-on: ubuntu-latest
    needs: validate_env_suffix
    environment: 
      name: aws-infra-${{github.event.client_payload.env_suffix}}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession

  diff:
    name: UI stack diff
    runs-on: ubuntu-latest
    needs:
      - awsauth
    environment:
      name: aws-infra-${{github.event.client_payload.env_suffix}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - run: mkdir -p dist/lambda_layer/nodejs
      - run: mkdir -p dist/ui
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession
      - name: cdk diff
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "diff"
          actions_comment: false
          cdk_args: "MyFinanceUiDeployStack"
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}

  infra_stack:
    name: Infra Test Stack
    runs-on: ubuntu-latest
    needs: 
      - print_client_payload
      - awsauth
      - verify_artifact
    environment: 
      name: aws-infra-test
    outputs:
      exists: ${{ steps.validate_deployment.outputs.stack_exists }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession
      - name: verify infra stacks exists
        id: validate_deployment
        run: |
          stackExists=true
          if [[ "$ENV" == "test" ]]; then
            aws cloudformation describe-stacks --stack-name prsfin-tst-infra-stack
            RET_CODE=$?
            if [[ "$RET_CODE" != "0" ]]; then
              stackExists=false
            fi
          fi
          echo stack_exists=$stackExists >> $GITHUB_OUTPUT
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
          ENV: ${{ github.event.client_payload.env_suffix }}
      - run: echo is infra stack exists, value=${{ steps.validate_deployment.outputs.stack_exists }}
      - run: echo is infra stack exists with because boolean true condition check is fulfilled 
        if: ${{ steps.validate_deployment.outputs.stack_exists }}
      - run: echo is infra stack exists with because 'true' equal condition check is fulfilled
        if: ${{ steps.validate_deployment.outputs.stack_exists == 'true' }}
      - run: echo is infra stack not exists with because boolean false condition is fulfilled
        if: ${{ !steps.validate_deployment.outputs.stack_exists }}
      - run: echo is infra stack not exists with because 'false' equal condition is fulfilled
        if: ${{ steps.validate_deployment.outputs.stack_exists == 'false'}}

  deployment:
    name: deploy UI stack
    runs-on: ubuntu-latest
    needs:
      - print_client_payload
      - awsauth
      - diff
      - verify_artifact
      - infra_stack
    environment:
      name: aws-infra-${{github.event.client_payload.env_suffix}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm --version
      - run: npm ci
      - run: npm run build
      - run: mkdir -p dist/lambda_layer/nodejs
      - run: mkdir -p dist/ui
      - name: setup lambda layer asset
        if: ${{ !needs.infra_stack.outputs.exists }}
        run: |
          mkdir -p dist/lambda_layer/nodejs
          jq "del(.devDependencies, .scripts, .bin)" package.json > dist/lambda_layer/nodejs/package.json
          cd dist/lambda_layer/nodejs
          npm install .
      - name: cdk deploy
        if: ${{ !needs.infra_stack.outputs.exists }}
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "deploy"
          cdk_stack: "MyFinanceInfraStack"
          debug_log: true
          actions_comment: false
          cdk_args: "--require-approval never --exclusively"
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
      - name: download UI artifact
        uses: actions/download-artifact@v4
        with:
          path: dist/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.ui_repository }}
          run-id: ${{ github.event.client_payload.repo_run_id }}
      - run: ls -lrt dist/${{ github.event.client_payload.artifact_name }}
      - name: Copy artifact files to UI asset directory
        run: cp -r dist/$ARTIFACT_NAME/* dist/ui
        env:
          ARTIFACT_NAME: ${{ github.event.client_payload.artifact_name }}
      - name: validate UI asset directory structure
        run: |
          ls -lrt dist/ui
          ls dist/ui/index.html
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession
      - name: cdk deploy
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "deploy"
          actions_comment: false
          debug_log: true
          cdk_stack: "MyFinanceUiDeployStack"
          cdk_args: "--require-approval never --exclusively"
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}

  invalidate_cache:
    name: Invalidate cf cache
    runs-on: ubuntu-latest
    needs:
      - deployment
    environment:
      name: aws-infra-${{github.event.client_payload.env_suffix}}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession
      - run: |
          echo aws cloudformation describe-stacks --stack-name prsfin-$INFRA_ENV-infra-stack --query 'Stacks[0].Outputs[?starts_with(OutputKey,`DistributionId`) == `true`].OutputValue' --output text
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name prsfin-$INFRA_ENV-infra-stack --query 'Stacks[0].Outputs[?starts_with(OutputKey,`DistributionId`) == `true`].OutputValue' --output text)
          echo Distribution Id = $DISTRIBUTION_ID
          echo aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/personal-finance/index.html" --query "Invalidation.Id" --output text
          INVALIDATION_ID=`aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/personal-finance/index.html" --query "Invalidation.Id" --output text`
          echo Invalidation Id = $INVALIDATION_ID
          INVALIDATION_STATUS="inprogress"
          until [ "$INVALIDATION_STATUS" == "Completed" ]; do
            echo aws cloudfront get-invalidation --id $INVALIDATION_ID --distribution-id $DISTRIBUTION_ID --query "Invalidation.Status" --output text
            INVALIDATION_STATUS=`aws cloudfront get-invalidation --id $INVALIDATION_ID --distribution-id $DISTRIBUTION_ID --query "Invalidation.Status" --output text`
            echo invalidation status = $INVALIDATION_STATUS, sleeping 20 sec if inprogress
            sleep 15
          done
          echo The task, to invalidate cache for index.html, is now completed.
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
    