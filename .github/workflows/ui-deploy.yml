# deploy or destroy UI stack when demanded. the on demand request is received from ui repository workflow
name: AWS UI Stack

on:
  repository_dispatch:
    types:
      - on-demand-ui-stack

concurrency:
  group: ${{ github.workflow }}-${{ github.event.client_payload.env_type }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  display_output:
    name: Print client payload of dispatch event
    runs-on: ubuntu-latest
    steps:
      - name: Print Client Payload
        run: |
          echo "Client Payload = ${{ toJson(github.event.client_payload) }}"
      - name: Print Github Context
        run: echo "github context json values = ${{ toJSON(github) }}"

  validate_payload:
    name: Validate Client Payload
    runs-on: ubuntu-latest
    environment:
      name: aws-infra-${{ github.event.client_payload.env_type }}
    steps:
      - name: Env Config
        run: |
          AWS_REGION="${{ vars.AWS_REGION }}"
          INFRA_ENV="${{ vars.INFRA_ENV }}"
          AWS_ROLE_ARN="${{ secrets.AWS_CICD_ROLE_ARN }}"
          if [ -z "$AWS_REGION" ] || [ -z "$INFRA_ENV" ] || [ -z "$AWS_ROLE_ARN" ]; then
            echo "One or more required environment variables are not set."
            exit 1
          fi
      - name: Payload Schema
        uses: actions/github-script@v7
        with:
          script: |
            const payload = context.payload.client_payload;
            const errors = [];
            if(!Array.isArray(payload.stackTags)) {
              errors.push("stack tags is not array.");
            }
            if(payload.type !== "provision" || payload.type !== "deprovision") {
              errors.push("request type is not supported.");
            }
            if(!payload.ui_repository) {
              errors.push("ui_repository is not provided");
            }
            if(!payload.workflow_run_id) {
              errors.push("workflow_run_id is not provided");
            }
            if(!payload.artifact_name) {
              errors.push("artifact_name is not provided");
            }
            if(errors.length>0) {
              core.setFailed("client payload schema invalid. errors: [" + errors.join(",") + "]");
            }
      - name: AWS Access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_CICD_ROLE_ARN }}
          role-session-name: cdkSession

  validate_deployment:
    name: Validate deployment
    runs-on: ubuntu-latest
    needs:
      - validate_payload
    if: github.event.client_payload.type == 'provision'
    environment:
      name: aws-infra-${{ github.event.client_payload.env_type }}
    steps:
      - run: mkdir -p dist/ui
      - name: download UI artifact
        uses: actions/download-artifact@v4
        with:
          path: dist/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.ui_repository }}
          run-id: ${{ github.event.client_payload.workflow_run_id }}
          name: ${{ github.event.client_payload.artifact_name }}
      - name: Copy artifact files to UI asset directory
        run: |
          ls -lrt dist/$ARTIFACT_NAME
          cp -r dist/$ARTIFACT_NAME/* dist/ui
        env:
          ARTIFACT_NAME: ${{ github.event.client_payload.artifact_name }}
      - name: validate UI asset directory structure
        run: |
          ls -lrt dist/ui
          ls -lrt dist/ui/index.html
          ls -lrt dist/ui/static
          ls -lrt dist/ui/logo.jpeg
          ls -lrt dist/ui/logo192.png
          ls -lrt dist/ui/static/css
          ls -lrt dist/ui/static/js
          ls -lrt dist/ui/static/media
          ls -lrt dist/ui/favicon.ico
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_CICD_ROLE_ARN }}
          role-session-name: cdkSession
      - name: Validate UI stack status
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
        run: |
          UI_STACK_NAME="prsfin-$INFRA_ENV-ui-deploy-stack"
          FAILED_REASON=""
          set +e
          DESCRIBE_UI_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$UI_STACK_NAME")
          RET_CODE=$?
          set -e
          if [[ $RET_CODE -eq 0 ]]; then
            STACK_STATUS=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].StackStatus")
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/view-stack-events.html#cfn-console-view-stack-data-resources-status-codes
            if [[ "$STACK_STATUS" =~ ^(CREATE_IN_PROGRESS|UPDATE_IN_PROGRESS|DELETE_IN_PROGRESS|ROLLBACK_IN_PROGRESS|UPDATE_ROLLBACK_IN_PROGRESS)$ ]]; then
              echo "UI Stack deployment is in progress. The system can not start deployment."
              exit 1
            fi
          fi

  diff_stack:
    name: UI stack diff
    runs-on: ubuntu-latest
    needs:
      - validate_deployment
    environment:
      name: aws-infra-${{ github.event.client_payload.env_type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: |
          npm ci
          npm run build
          mkdir -p dist/lambda_layer/nodejs
          mkdir -p dist/ui
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_CICD_ROLE_ARN }}
          role-session-name: cdkSession
      - name: cdk diff
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "diff"
          actions_comment: false
          cdk_args: "MyFinanceUiDeployStack"
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
          TAGS: ${{ join(github.event.client_payload.stackTags, ',') }}

  wait_infra_deploy:
    name: Wait for Infra Stack deployment
    runs-on: ubuntu-latest
    needs:
      - validate_deployment
    environment:
      name: aws-infra-${{ github.event.client_payload.env_type }}
    outputs:
      distribution-id: ${{ steps.wait-stack.outputs.distribution_id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_CICD_ROLE_ARN }}
          role-session-name: cdkSession
      - id: wait-stack
        name: Wait for Stack Completion
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
        run: |
          # Wait duration to execute the command and check status 
          SLEEP_DURATION=3m
          TOTAL_WAIT_DURATION=60m
          REMAINING_ATTEMPTS=$((TOTAL_WAIT_DURATION / SLEEP_DURATION))
          WAIT_DURATION_STACK_NOT_EXIST=15m
          REMAINING_ATTEMPTS_STACK_NOT_EXIST=$((WAIT_DURATION_STACK_NOT_EXIST / SLEEP_DURATION))
          API_STACK_NAME="prsfin-$INFRA_ENV-infra-stack"
          while :; do
            echo "Deployment is in progress. Waiting for $SLEEP_DURATION."
            sleep $SLEEP_DURATION
            set +e
            DESCRIBE_API_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$API_STACK_NAME")
            RET_CODE=$?
            set -e
            if [[ $RET_CODE -eq 0 ]]; then
              STACK_STATUS=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].StackStatus")
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/view-stack-events.html#cfn-console-view-stack-data-resources-status-codes
              if [[ "$STACK_STATUS" =~ ^(CREATE_COMPLETE|UPDATE_COMPLETE)$ ]]; then
                echo "Infra Stack is deployed successfully."
                break
              elif [[ "$STACK_STATUS" =~ ^(CREATE_FAILED|UPDATE_FAILED|ROLLBACK.*|UPDATE_ROLLBACK.*|DELETE.*)$ ]]; then
                FAILED_REASON="Infra Stack deployment failed. Stack status is $STACK_STATUS. Please check stack events."
                break
              fi
            elif [[ $REMAINING_ATTEMPTS_STACK_NOT_EXIST -gt 0 ]]; then
              REMAINING_ATTEMPTS_STACK_NOT_EXIST=$((REMAINING_ATTEMPTS_STACK_NOT_EXIST - 1))
            fi
            if [[ $REMAINING_ATTEMPTS -eq 0 ]]; then
              FAILED_REASON="Infra Stack deployment is taking longer time. Please check the status manually."
              break
            fi
            if [[ $REMAINING_ATTEMPTS_STACK_NOT_EXIST -eq 0 ]]; then
              FAILED_REASON="Infra Stack deployment has not been started. Stack does not exist. Please check API request form and workflow"
              break
            fi
            REMAINING_ATTEMPTS=$((REMAINING_ATTEMPTS - 1))
          done

          if [[ -n "$FAILED_REASON" ]]; then
            echo "Failed Reason: $FAILED_REASON"
            exit 1
          fi
          DISTRIBUTION_ID=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r '.Stacks[0].Outputs[?starts_with(OutputKey,`DistributionId`) == `true`].OutputValue')
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

  deployment:
    name: deploy UI stack
    runs-on: ubuntu-latest
    needs:
      - diff_stack
      - wait_infra_deploy
    environment:
      name: aws-infra-${{ github.event.client_payload.env_type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: |
          npm --version
          npm ci
          npm run build
          mkdir -p dist/lambda_layer/nodejs
          mkdir -p dist/ui
      - name: download UI artifact
        uses: actions/download-artifact@v4
        with:
          path: dist/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.ui_repository }}
          run-id: ${{ github.event.client_payload.workflow_run_id }}
          name: ${{ github.event.client_payload.artifact_name }}
      - run: ls -lrt dist/${{ github.event.client_payload.artifact_name }}
      - run: |
          cp -r dist/$ARTIFACT_NAME/* dist/ui
          ls -lrt dist/ui
        env:
          ARTIFACT_NAME: ${{ github.event.client_payload.artifact_name }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          # setup cicd role through instructions from aws-manual branch.
          role-to-assume: ${{ secrets.AWS_CICD_ROLE_ARN }}
          role-session-name: cdkSession
      - name: cdk deploy
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "deploy"
          actions_comment: false
          debug_log: true
          cdk_stack: "MyFinanceUiDeployStack"
          cdk_args: "--require-approval never --exclusively"
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
          TAGS: ${{ join(github.event.client_payload.stackTags, ',') }}
      - run: |
          echo aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/personal-finance/index.html" --query "Invalidation.Id" --output text
          INVALIDATION_ID=`aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/personal-finance/index.html" --query "Invalidation.Id" --output text`
          echo Invalidation Id = $INVALIDATION_ID
          INVALIDATION_STATUS="inprogress"
          SLEEP_DURATION=20
          until [ "$INVALIDATION_STATUS" == "Completed" ]; do
            echo aws cloudfront get-invalidation --id $INVALIDATION_ID --distribution-id $DISTRIBUTION_ID --query "Invalidation.Status" --output text
            INVALIDATION_STATUS=`aws cloudfront get-invalidation --id $INVALIDATION_ID --distribution-id $DISTRIBUTION_ID --query "Invalidation.Status" --output text`
            echo invalidation status = $INVALIDATION_STATUS, sleeping $SLEEP_DURATION sec if inprogress
            sleep $SLEEP_DURATION
          done
          echo The task, to invalidate cache for index.html, is now completed.
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
          DISTRIBUTION_ID: ${{ needs.wait_infra_deploy.outputs.distribution-id }}
