# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Test CDK AWS

# list of trigger events https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows
on:
  push:
    branches:
      - test-pipeline

concurrency:
  group: build-test
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build

  unittest:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - run: npm run test

  synth:
    name: Synthesize
    runs-on: ubuntu-latest
    needs:
      - build
    environment: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - name: cdk synth
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "synth"
          actions_comment: true
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}

  diff:
    name: Stack Differences
    runs-on: ubuntu-latest
    needs:
      - synth
    environment: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - name: configure aws credential
        uses: aws-actions/configure-aws-credentials@v4
        id: awscred
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession
      - uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "diff"
          actions_comment: true
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
          # AWS_ACCESS_KEY_ID: ${{ needs.awsauth.outputs.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ needs.awsauth.outputs.AWS_SECRET_ACCESS_KEY }}
          # AWS_SESSION_TOKEN: ${{ needs.awsauth.outputs.AWS_SESSION_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - diff
    environment: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - name: configure aws credential
        uses: aws-actions/configure-aws-credentials@v4
        id: awscred
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession
      - name: aws cred outputs
        run: |
          echo CREDS_AWS_ACCESS_KEY_ID: "${CREDS_AWS_ACCESS_KEY_ID}"
          echo CREDS_AWS_SECRET_ACCESS_KEY: "${CREDS_AWS_SECRET_ACCESS_KEY}"
          echo CREDS_AWS_SESSION_TOKEN: "${CREDS_AWS_SESSION_TOKEN}"
          echo CREDS_AWS_ACCOUNT_ID: "${CREDS_AWS_ACCOUNT_ID}"
          echo outputs json: "${AWS_CREDS_JSON}"
          echo AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
          echo AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
          echo AWS_SESSION_TOKEN: "${AWS_SESSION_TOKEN}"
          echo AWS_ACCOUNT_ID: "${AWS_ACCOUNT_ID}"
        env:
          CREDS_AWS_ACCESS_KEY_ID: ${{ steps.awscred.outputs.aws-access-key-id }}
          CREDS_AWS_SECRET_ACCESS_KEY: ${{ steps.awscred.outputs.aws-secret-access-key }}
          CREDS_AWS_SESSION_TOKEN: ${{ steps.awscred.outputs.aws-session-token }}
          CREDS_AWS_ACCOUNT_ID: ${{ steps.awscred.outputs.aws-account-id }}
          AWS_CREDS_JSON: ${{ toJson(steps.awscred.outputs) }}
      - name: cdk deploy
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "deploy"
          actions_comment: true
          cdk_args: "--require-approval never"
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
          # AWS_ACCESS_KEY_ID: ${{ steps.awscred.outputs.aws-access-key-id }}
          # AWS_SECRET_ACCESS_KEY: ${{ steps.awscred.outputs.aws-secret-access-key }}
          # AWS_SESSION_TOKEN: ${{ steps.awscred.outputs.aws-session-token }}

  destroy:
    name: Destroy
    runs-on: ubuntu-latest
    needs:
      - deploy
    environment: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node Latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - name: configure aws credential
        uses: aws-actions/configure-aws-credentials@v4
        id: awscred
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession
      - name: cdk deploy
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: "destroy"
          actions_comment: true
          # cdk_args: "--require-approval never"
        env:
          INFRA_ENV: ${{ vars.INFRA_ENV }}
          # AWS_ACCESS_KEY_ID: ${{ steps.awscred.outputs.aws-access-key-id }}
          # AWS_SECRET_ACCESS_KEY: ${{ steps.awscred.outputs.aws-secret-access-key }}
          # AWS_SESSION_TOKEN: ${{ steps.awscred.outputs.aws-session-token }}
